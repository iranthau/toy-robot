c
n
robot.board = self
n
robot.board = self
self
robot.board
robot
n
c
continue
position_valid?(robot.position)
c
position_valid?(robot.position)
quit
raise 'invalid position' unless robot.position.x.between?(0, @position.x - 1) && robot.position.y.between?(0, @position.y - 1)
   17:                                     position.y.between?(0, @position.y - 1)
raise 'invalid position' unless position.x.between?(0, @position.x - 1) &&
position_valid?(robot.position)
@robots
expect(subject.robots.length).to eq(1)
n
self.position_valid?(robot.position)
position_valid?(robot.position)
robot.position.y.between?(0, @position.y - 1) && robot.position.x.between?(0, @position.x - 1)
robot.position.y.between?(0, @position.y - 1) && position.x.between?(0, @position.x - 1)
robot.position.y.between?(0, @position.y - 1)
robot.position.x.between?(0, @position.x - 1)
position.x.between?(0, @position.x - 1)
robot.position
position_valid?(robot.position)
robot.position.direction
robot.position.y
robot.position.x
robot.position
robot
q
n
c
n
number
c
n
c
continue
quit
ROMAN_MAP[number - (number % 5)]
ROMAN_MAP[1] * (number % 5)
number % 5
roman(number-10)
ROMAN_MAP[1] * (number % 5)
ROMAN_MAP[number - (number % 5)]
"#{roman(10)}#{roman(number-10)}"
roman(10)
roman(10
roman(number-10)
number
c
number
c
number
c
number
c
number
c
number
c
number
c
number
n
number
quit
n%5
n.inspect
n
continue
